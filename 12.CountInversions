import java.util.* ;
import java.io.*; 
public class Solution {
    public static long getInversions(long arr[], int n) {
        return sort(arr,0,n-1);
        //return count;
    }
    public static long merge(long arr[] , int l,int mid, int r){
        long left[] = Arrays.copyOfRange(arr,l,mid+1);
        long right[] =Arrays.copyOfRange(arr,mid+1,r+1);
        int i =0;
        int j =0;
        int k = l;
        long temp = 0;
        while(i<left.length && j<right.length){
            if(left[i]>right[j]){
                temp += (mid+1)-(l+i);
                arr[k++] = right[j++];
            }else{ 
                arr[k++] = left[i++];
            }
        }
        while(i<left.length){
            arr[k++] = left[i++];
        }
        while(j<right.length){
            arr[k++] = right[j++];
        }
        return temp;
    }
    public static long sort(long arr[], int l, int r){
        long count = 0;
        if(l<r){
            int mid = l+(r-l)/2;
            count += sort(arr,l,mid);
            count += sort(arr,mid+1,r);
            count += merge(arr,l,mid,r);
        }
        return count;
    }
}